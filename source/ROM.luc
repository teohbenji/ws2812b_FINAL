module rom (
	// 6 bit encoding for 30+ rom states
	input address[5], 

	// 42 bit output,
	// value[35:0] is map
	// value[38:36] is endx
  // value[41:39] is endy
	output value[42] 
  ) 
{
  //(end -> start of connector)
  //bottom is index 0
  const ROM = {
  
  //Special maps, endy = endx = 000 as default  
  42b000000000000000000111111111111000000000000, //map 20: turn on middle 2 rows
  42b000000000000010010000000111111100001000000,  //map 19: :(
  42b000000000000010010000000100001111111000000, //map 18: :)
  42b000000111111111111111111111111111111111111, //map 17: turn on all rows

  //2 Endpoint (5,5) map -> endy = 101, endx = 101  
  42b101101100000110000010000110000100000111111, //map 16
  42b101101110000011100000100111100100000111111, //map 15
  
  //1 Endpoint (4,5) map -> endy = 101, endx = 100  
  42b101100110000100000111100000110000010000011, //map 14
    
  //3 Endpoint (3,5) maps -> endy = 101, endx = 011
  42b101011001111000001000111000100000111000001, //map 13
  42b101011001000011000110000100000111111000001, 
  42b101011111000100000111100000111000001000001, //map 11
      
  //2 Endpoint (2,5) maps -> endy = 101, endx = 010
  42b101010000100000100000110000011000001000001, //map 10
  42b101010011100010000010000011000001100000111, //map 9
    
  //2 Endpoint (1,5) maps -> endy = 101, endx = 001
  42b101001001110001000001000001100000100000111, //map 8
  42b101001000010000010000010000011000001000001, //map 7
    
  //6 Endpoint (0,5) maps -> endy = 101, endx = 000
  42b101000000111000100000110000010000010000011, //map 6
  42b101000111111100000100000111100000110000011,
  42b101000000111000100000110000010000010000011,    
  42b101000000111000100000100011100010000011111,
  42b101000000001001111001000001110000011000001,
  42b101000000011001110001100000100000111000001 //map 1
  };
  
  always {
	value = ROM[address];
  }
}