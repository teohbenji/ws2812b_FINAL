module ws2812b (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    input action[2],        // b0 = update, b1 = reset TODO: might have to change to always update state if connected directly to register
    input color[2],         //connect to correct map index register
    input lit_leds_1[6],      //end -> start of connector, make 6 of this one for each strip
    input lit_leds_2[6],
    input lit_leds_3[6],
    input lit_leds_4[6],
    input lit_leds_5[6],
    input lit_leds_6[6], 
    output outled_1,           // to LED strip, Br pin C40, connect LED Strip to 5V for power    
    output outled_2,    
    output outled_3,
    /*
    output outled_4,
    output outled_5,
    output outled_6,
    */
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output led [8]         // 8 user controllable LEDs
  ) {
  
  // We shall always assume that COLUMN_DIMENSION and ROW_DIMENSION is a 2^x
  const COLUMN_DIMENSION = 8; // how many "columns"? 
  const ROW_DIMENSION = 8; // how many "rows"?

  const PIXEL_COUNT = COLUMN_DIMENSION *  ROW_DIMENSION;   
  const ENCODING_AMOUNT = 5; // how many different encodings are used? As example, we use 4
  
  // This is a custom encoding
  // WHITE (100), BLUE (011), RED (010), GREEN (001), OFF(000)
  const LEDCOLOR = {24hFFFFFF, 24hFF0000, 24h00FF00, 24h0000FF, 24h000000}; 
  
  //NOTE: Bottom of the rom is index 0!
  const ROM = {
    24b100100100100100100100100, //all white
    24b011011011011011011011011, //all blue
    24b010010010010010010010010, //all red
    24b001001001001001001001001 //all green (end -> start of connector)
  };
  
  sig rst; // reset signal
  
  sig encoded_pixel_address_1[$clog2(PIXEL_COUNT)*$clog2(ENCODING_AMOUNT)];
  sig current_color_encoding_1[$clog2(ENCODING_AMOUNT)];
  sig encoded_pixel_address_2[$clog2(PIXEL_COUNT)*$clog2(ENCODING_AMOUNT)];
  sig current_color_encoding_2[$clog2(ENCODING_AMOUNT)];
  sig encoded_pixel_address_3[$clog2(PIXEL_COUNT)*$clog2(ENCODING_AMOUNT)];
  sig current_color_encoding_3[$clog2(ENCODING_AMOUNT)];

  var index;

  // observed output of the strip: (if matrix is used, this is the value of the top row or first row)
  // (connector) WHITE WHITE BLUE WHITE RED WHITE GREEN WHITE BLUE BLUE BLUE BLUE BLUE BLUE BLUE BLUE (end of strip)
  // e.g: E is 1110 ---> 10 first (BLUE) then 11 (WHITE)
  // as example, we repeat pattern each row, assuming there are 16 cols in a row hence 32 bits of encoded data per row
  dff led_encoding_1[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(8x{ROM[0]})); // 2 bit to encode a color per pixel
  dff temp_encoding_1[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(0)); // holds temporary value (double buffering)
  dff led_encoding_2[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(8x{ROM[0]})); 
  dff temp_encoding_2[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(0));
  dff led_encoding_3[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(8x{ROM[0]})); 
  dff temp_encoding_3[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(0));
  
  
  ws2812b_writer led_strip_1(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst));
  ws2812b_writer led_strip_2(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst)); 
  ws2812b_writer led_strip_3(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst)); 
   
  fsm state(.clk(clk), .rst(rst)) = {INIT, IDLE, LOAD, CLEAR};
  
  reverser index_reverser_1(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  reverser index_reverser_2(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));  
  reverser index_reverser_3(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  /*
  reverser index_reverser_4(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  reverser index_reverser_5(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  reverser index_reverser_6(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  */
  
  // a state to toggle revere 
  dff matrix_used(#INIT(0), .clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits    
       
    //do not refresh and clear leds by default
    led_strip_1.update = 0; 
    led_strip_1.clear = 0; 
    led_strip_2.update = 0; 
    led_strip_2.clear = 0; 
    led_strip_3.update = 0; 
    led_strip_3.clear = 0; 
    
    case (state.q){
      state.INIT:
          temp_encoding_1.d = 8x{ROM[0]};//temp value to silence error
          led_strip_1.clear = 1; //turn off strip at the start 
          temp_encoding_2.d = 8x{ROM[0]};//temp value to silence error
          led_strip_2.clear = 1; //turn off strip at the start
          temp_encoding_3.d = 8x{ROM[0]};//temp value to silence error
          led_strip_3.clear = 1; //turn off strip at the start
          
          state.d = state.IDLE;
        
      state.IDLE:

          case (action) {          
            b01:
              //sets led color to be updated
              case (color) {
                b00: 
                    temp_encoding_1.d = 8x{ROM[0]};
                    temp_encoding_2.d = 8x{ROM[0]};
                    temp_encoding_3.d = 8x{ROM[0]};
                b01: 
                    temp_encoding_1.d = 8x{ROM[1]};
                    temp_encoding_2.d = 8x{ROM[1]};
                    temp_encoding_3.d = 8x{ROM[1]};
                b10: 
                    temp_encoding_1.d = 8x{ROM[2]};
                    temp_encoding_2.d = 8x{ROM[2]};
                    temp_encoding_3.d = 8x{ROM[2]};
                b11: 
                    temp_encoding_1.d = 8x{ROM[3]};
                    temp_encoding_2.d = 8x{ROM[3]};
                    temp_encoding_3.d = 8x{ROM[3]};
              }
              
              // Turn off specific LEDs for strip 1
              for (index = 0; index < 6; index++) {
                  if (lit_leds_1[index] == b0) {
                      temp_encoding_1.d[index*$clog2(ENCODING_AMOUNT) +: $clog2(ENCODING_AMOUNT)] = 3b000;
                  }
              }
            
              // Turn off specific LEDs for strip 2
              for (index = 0; index < 6; index++) {
                  if (lit_leds_2[index] == b0) {
                      temp_encoding_2.d[index*$clog2(ENCODING_AMOUNT) +: $clog2(ENCODING_AMOUNT)] = 3b000;
                  }
              }
            
              // Turn off specific LEDs for strip 3
              for (index = 0; index < 6; index++) {
                  if (lit_leds_3[index] == b0) {
                      temp_encoding_3.d[index*$clog2(ENCODING_AMOUNT) +: $clog2(ENCODING_AMOUNT)] = 3b000;
                  }
              }

              state.d = state.LOAD;
              
            b10:            
               state.d = state.CLEAR;
              
            //b00
            default:
              temp_encoding_1.d = temp_encoding_1.q;//do nothing
              temp_encoding_2.d = temp_encoding_2.q;
              temp_encoding_3.d = temp_encoding_3.q;
          }           
        
      state.LOAD:
          // wait until we are at RESET state before we decide to refresh the screen
          if (led_strip_1.reset){
              // tell the LED to update the pixels for led strip 1
              led_strip_1.update = 1;
              led_encoding_1.d = temp_encoding_1.q;
              state.d = state.IDLE;
          }
        
          if (led_strip_2.reset){
              // tell the LED to update the pixels for led strip 1
              led_strip_2.update = 1;
              led_encoding_2.d = temp_encoding_2.q;
              state.d = state.IDLE;
          }
          
          if (led_strip_3.reset){
              // tell the LED to update the pixels for led strip 1
              led_strip_3.update = 1;
              led_encoding_3.d = temp_encoding_3.q;
              state.d = state.IDLE;
          }
      
      state.CLEAR:
          led_strip_1.clear = 1;
          led_strip_2.clear = 1;
          led_strip_3.clear = 1;
          state.d = state.IDLE;  
          }
    
    // connect reversers to led_strips 
    index_reverser_1.original_pixel_address = led_strip_1.pixel_address;
    index_reverser_1.writer_pixel_done = led_strip_1.next_pixel;
    index_reverser_1.activate = matrix_used.q;
    encoded_pixel_address_1 = index_reverser_1.effective_pixel_address * $clog2(ENCODING_AMOUNT);
    
    index_reverser_2.original_pixel_address = led_strip_2.pixel_address;
    index_reverser_2.writer_pixel_done = led_strip_2.next_pixel;
    index_reverser_2.activate = matrix_used.q;
    encoded_pixel_address_2 = index_reverser_2.effective_pixel_address * $clog2(ENCODING_AMOUNT);
    
    index_reverser_3.original_pixel_address = led_strip_3.pixel_address;
    index_reverser_3.writer_pixel_done = led_strip_3.next_pixel;
    index_reverser_3.activate = matrix_used.q;
    encoded_pixel_address_3 = index_reverser_3.effective_pixel_address * $clog2(ENCODING_AMOUNT);
    
    // led_strip.pixel_address will vary between 0000 to 1100 
    // address 0 --> encoding bit 1:0 
    // address 1 --> encoding bit 3:2 
    // address 2 --> encoding bit 5
    // address N --> encoding bit N*2+1:N*2
    
   // get current color encoding for this pixel
    for (index=0; index<$clog2(ENCODING_AMOUNT); index++){
       current_color_encoding_1[index] = led_encoding_1.q[encoded_pixel_address_1+index];
    }
    
    for (index=0; index<$clog2(ENCODING_AMOUNT); index++){
       current_color_encoding_2[index] = led_encoding_2.q[encoded_pixel_address_2+index];
    }
    
    for (index=0; index<$clog2(ENCODING_AMOUNT); index++){
       current_color_encoding_3[index] = led_encoding_3.q[encoded_pixel_address_3+index];
    }
    
    // based on the encoding extracted from dff led_encoding, we get the 24bit color value
    led_strip_1.color = LEDCOLOR[current_color_encoding_1]; 
    led_strip_2.color = LEDCOLOR[current_color_encoding_2]; 
    led_strip_3.color = LEDCOLOR[current_color_encoding_3]; 
    
    outled_1=led_strip_1.led;
    outled_2=led_strip_2.led;
    outled_3=led_strip_3.led;
      
    
    // debug 
    // show the current LED color
    io_led[0] = led_encoding_1.q[7:0];
    io_led[1] = led_encoding_1.q[15:8];
    io_led[2] = led_encoding_1.q[23:16];
       
  }
}


