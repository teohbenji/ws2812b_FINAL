module ws2812b (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C40, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
    //probably add an input leds[6][6] which indicate which led to turn const
    //also add an encoder input color to set color of all 6 led strips
  ) {
  
  // We shall always assume that COLUMN_DIMENSION and ROW_DIMENSION is a 2^x
  const COLUMN_DIMENSION = 8; // how many "columns"? 
  const ROW_DIMENSION = 8; // how many "rows"?

  const PIXEL_COUNT = COLUMN_DIMENSION *  ROW_DIMENSION;   
  const ENCODING_AMOUNT = 4; // how many different encodings are used? As example, we use 4
  
  // This is a custom encoding
  // WHITE (11), BLUE (10), RED (01), GREEN (00)
  const LEDCOLOR = {24hFFFFFF, 24hFF0000, 24h00FF00, 24h0000FF}; 
  
  
  //NOTE: Bottom of the rom is index 0!
  const ROM = {
    16b1111111111111111, // all white 
    16b0000000000000000, // all green
    16b0101010101010101, // all red
    16b1010101010101010 // all blue (end -> start of connector)
  };
  
  sig rst; // reset signal
  sig encoded_pixel_address[$clog2(PIXEL_COUNT)*$clog2(ENCODING_AMOUNT)];
  sig current_color_encoding[$clog2(ENCODING_AMOUNT)];

  var index;

  // observed output of the strip: (if matrix is used, this is the value of the top row or first row)
  // (connector) WHITE WHITE BLUE WHITE RED WHITE GREEN WHITE BLUE BLUE BLUE BLUE BLUE BLUE BLUE BLUE (end of strip)
  // e.g: E is 1110 ---> 10 first (BLUE) then 11 (WHITE)
  // as example, we repeat pattern each row, assuming there are 16 cols in a row hence 32 bits of encoded data per row
  dff led_encoding[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(8x{ROM[0]})); // 2 bit to encode a color per pixel
  dff temp_encoding[PIXEL_COUNT*$clog2(ENCODING_AMOUNT)](.clk(clk), .rst(rst), #INIT(0)); // holds temporary value (double buffering)
  
  
  /* Not needed for ROM encoding
  dff counter[28](.clk(clk), .rst(rst), #INIT(0));
  dff rom_address[$clog2(ROW_DIMENSION)](.clk(clk), #INIT(0), .rst(rst));
  */
  
  ws2812b_writer led_strip(#PIXEL_COUNT(PIXEL_COUNT), .clk(clk), .rst(rst)); 
  fsm state(.clk(clk), .rst(rst)) = {IDLE, LOAD};
  
  reverser index_reverser(.clk(clk), .rst(rst), #COLUMN_DIMENSION(COLUMN_DIMENSION), #ROW_DIMENSION(ROW_DIMENSION));
  
  // user inputs 
  button_conditioner clear_button(.clk(clk));
  edge_detector clear_button_edge(.clk(clk), #RISE(1), #FALL(0));
  button_conditioner reverse_button(.clk(clk));
  edge_detector reverse_button_edge(.clk(clk), #RISE(1), #FALL(0));
  
  // a state to toggle revere 
  dff matrix_used(#INIT(0), .clk(clk), .rst(rst));
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    /*Code that cycles through the rom address
    counter.d = counter.q + 1;
    
    if (&counter.q){ // load new value when counter.q is all 1
      rom_address.d = rom_address.q + 1; // advance ROM address by 1 the moment counter[27] (MSB) is 1
    }
    */
    
    clear_button.in = io_button[2]; // use this button to turn off all LEDs 
    clear_button_edge.in = clear_button.out;
    
    reverse_button.in = io_button[1]; // use this button to enable reverse
    reverse_button_edge.in = reverse_button.out;
    
    // toggle matrix used button 
    if (reverse_button_edge.out){
      matrix_used.d = matrix_used.q + 1;
    }
    
    led_strip.update = 0; // do not refresh by default
    led_strip.clear = 0; // do not clear by default
    

    // use io_dip[2:0]  to encode 12 unique pixel values at most (24 bits)
    case (state.q){
      state.IDLE:
        /*Code that cycles through the rom address   
        if(~|counter.q){ // load new value when counter is all zero
                temp_encoding.d = 8x{ROM[rom_address.q]};
                state.d = state.LOAD;
            }
        */
        temp_encoding.d = 8x{ROM[2]}; //CHANGE COLOR HERE
        state.d = state.LOAD;

        if (clear_button_edge.out){
            led_strip.clear = 1;
        }
      
      state.LOAD:
            // wait until we are at RESET state before we decide to refresh the screen
            if (led_strip.reset){
                // tell the LED to update the pixels
                led_strip.update = 1;
                led_encoding.d = temp_encoding.q;
                state.d = state.IDLE;
            }
    }
    
    // connect reverser to led_strip 
    index_reverser.original_pixel_address = led_strip.pixel_address;
    index_reverser.writer_pixel_done = led_strip.next_pixel;
    index_reverser.activate = matrix_used.q;
    encoded_pixel_address = index_reverser.effective_pixel_address * $clog2(ENCODING_AMOUNT);
    
    // led_strip.pixel_address will vary between 0000 to 1100 
    // address 0 --> encoding bit 1:0 
    // address 1 --> encoding bit 3:2 
    // address 2 --> encoding bit 5
    // address N --> encoding bit N*2+1:N*2
    
   // get current color encoding for this pixel
    for (index=0; index<$clog2(ENCODING_AMOUNT); index++){
       current_color_encoding[index] = led_encoding.q[encoded_pixel_address+index];
    }
    
    // based on the encoding extracted from dff led_encoding, we get the 24bit color value
    led_strip.color = LEDCOLOR[current_color_encoding]; 
    outled=led_strip.led;
    
    // debug 
    // show the current LED color
    io_led[0] = led_encoding.q[7:0];
    io_led[1] = led_encoding.q[15:8];
    io_led[2] = led_encoding.q[23:16];
   
    led[0] = matrix_used.q; 
    led[7:1] = led_strip.pixel_address;
    

    
  }
}


