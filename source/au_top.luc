module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output outled_1,
    output outled_2,
    output outled_3,
    output outled_4,
    output outled_5,
    output outled_6,
    output io_seg [8],      // 7-segment LEDs on IO Shield (ANODE)
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  ws2812b ws2812b;
  fsm state(.clk(clk), .rst(rst)) = {IDLE, LOAD, CLEAR};
  
  // user inputs 
  button_conditioner latch_button(.clk(clk));
  edge_detector latch_button_edge(.clk(clk), #RISE(1), #FALL(0));
  button_conditioner clear_button(.clk(clk));
  edge_detector clear_button_edge(.clk(clk), #RISE(1), #FALL(0));
  

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset

    
    led = c{3b0, io_button};  // connect buttons to LEDs to see which button is pressed
    
    usb_tx = usb_rx;          // loop serial port
    
    io_seg = 8b0; // connect segments to the driver
    io_sel = 4b0110; // turn on rightmost digit, and leftmost digit
    
    
    latch_button.in = io_button[0]; // use this button to turn on led
    latch_button_edge.in = latch_button.out;
    
    clear_button.in = io_button[2]; // use this button to turn off all LEDs 
    clear_button_edge.in = clear_button.out;
    
    
    ws2812b.clk = clk;
    ws2812b.rst_n = rst_n;
    ws2812b.usb_rx = usb_rx;
    ws2812b.color = b10;
    ws2812b.action = b00;
    ws2812b.lit_leds_1 = 6b000001;
    ws2812b.lit_leds_2 = 6b000010;
    ws2812b.lit_leds_3 = 6b000100;
    ws2812b.lit_leds_4 = 6b001000;
    ws2812b.lit_leds_5 = 6b010000;
    ws2812b.lit_leds_6 = 6b100000;
       
    
    case (state.q){
      state.IDLE:
         ws2812b.action = b00; //reset action back to idle
         if (latch_button_edge.out){
            state.d = state.LOAD;
          }
         if (clear_button_edge.out){
            state.d = state.CLEAR;
          }
                  
      state.LOAD:
         ws2812b.action = b01;
         state.d = state.IDLE;
        
      state.CLEAR:
         ws2812b.action = b10;
         state.d = state.IDLE;
    }

    // ****** OUTPUT SETTING ****** //
    // Test output all leds light up  
    outled_1 = ws2812b.outled_1;
    outled_2 = ws2812b.outled_2; 
    outled_3 = ws2812b.outled_3; 
    outled_4 = ws2812b.outled_1; 
    outled_5 = ws2812b.outled_1; 
    outled_6 = ws2812b.outled_1;  
    io_led = ws2812b.io_led; 


  }
}