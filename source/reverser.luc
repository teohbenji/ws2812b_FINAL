module reverser #(
  COLUMN_DIMENSION = 4 : COLUMN_DIMENSION > 0,
  ROW_DIMENSION = 4 : ROW_DIMENSION > 0,
  ENCODING_AMOUNT = 4 : ENCODING_AMOUNT > 0
  )(
    input clk,  // clock
    input rst,  // reset
    input original_pixel_address[$clog2(COLUMN_DIMENSION*ROW_DIMENSION)],
    input activate,
    input writer_pixel_done,
    output effective_pixel_address[$clog2(COLUMN_DIMENSION*ROW_DIMENSION)]
  ) {
  
  const PIXEL_COUNT = COLUMN_DIMENSION * ROW_DIMENSION;
  const COLUMN_DIMENSION_BITS = $clog2(COLUMN_DIMENSION); // number of bits needed to represent which column we are currently at
  const HIGHER_BITS = $clog2(PIXEL_COUNT) - COLUMN_DIMENSION_BITS;
  
  sig reversed_pixel_address[$clog2(COLUMN_DIMENSION*ROW_DIMENSION)];

  // helper bits to reverse every other row if we are using ws2812b matrix
  dff reverse(.clk(clk), .rst(rst), #INIT(0));
  always {
    // EXAMPLE: 16x16 ws2812b matrix transformation logic
    // pixel 0 to 15 is not reversed, reverse.q == 0, current_row.q == 0
    // pixel 16 to 31 is reversed, becomes 31 to 16, reverse.q == 1, current_row.q == 1
    // 16 ---> 31
    // 17 ---> 30 
    // 31 ---> 16 
    // pixel 32 to 47 is not reversed, reverse.q == 0, current_row.q == 2
    // pixel 48 to 63 is reversed, reverse.q == 1, current_row.q == 3
    // 48 ---> 63 
    // 49 ---> 62 
    // and so on
    // we can do this by keeping the higher bit, and do a 1s complement of the lower COLUMN_DIMENSION bits (bitwise XOR with 1)
    
    // check if we are a multiple of DIMENSION 
    // here in our example, we have column 0 to 15
    // so each time the last four bit our pixel_address is 1111, we will reverse the row addressing
    // when address turns 1111, we can't just change the encoding right away, we need to wait for it to finish loading first, all 24 bits sent
    if  (&original_pixel_address[COLUMN_DIMENSION_BITS-1:0] & writer_pixel_done){
      reverse.d = reverse.q + 1; // toggle the reverse flag, test 1
    }
    
    if (reverse.q)
    {
       reversed_pixel_address = original_pixel_address ^ c{HIGHER_BITSx{b0},COLUMN_DIMENSION_BITSx{b1}}; // higher bits stays the same 
      // reversed_pixel_address = 0; // test color at 0 which is 11 --> white
     }
    else
    {
      reversed_pixel_address = original_pixel_address;
    }
    
    if (activate){ // if we decide to flip the leftmost bit, we reverse every other row
      // reverse every other row
      effective_pixel_address = reversed_pixel_address;
    }
    else{
      // don't reverse every other row 
      effective_pixel_address = original_pixel_address;
    }
    
  }
}
